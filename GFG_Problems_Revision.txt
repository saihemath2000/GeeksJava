NOTE:
*. (x &~(x-1)) ---> It finds a no which has only one bit set and bit corresponds to last set bit of x
*. (1<<n) --->2^n, (n>>1)--->n/2
*. Swap two numbers using xor  
   a^=b
   b^=a 
   a^=b
 * Strings ->substring,equals,indexOf,toString,StringBuilder 

JAVA REVISION:-

a) MATHEMATICS

Trailing zeros in factorial
GCD
Prime
Prime Factors
Prime numbers upto n (Sieve of Eratosthenes)
Computing power(x^n)

b) BIT LOGIC
Check if kth bit is set (1<<(k-1))
Count set bits of n    (while n>0: n=n&(n-1),res+=1)
Power of 2 (n&(n-1)==0---> true)
One odd occuring (res=res ^ arr[i])--> xor
Power set of a string("abc"....)

c) RECURSION
Palindrome recursive (return (str.charAt(start)==str.charAt(end))&& palindrome(str,start+1,end-1));
All subsets of a string/powerset
Josephus problem (jos(n-1,k)+k)%n
Count subsets for given sum (sum=25,[10,15,20])
Permutations of a string (maintain index of fixed position , along with a loop,swap)

d) ARRAYS
Finding second largest element (keep track of largest element )
Remove duplicates from an unsorted array in O(1) space
Left rotate an array by d places (recursion, reverse first d places, next d to n places and reverse total array)
Trapping water (finding lmax, rmax and finding min between corresponding values-arr[i])
Maxsumsubarray (finding max sum)
Maxcircular subarray sum
Sliding window technique
Find subarray with given sum

e) SEARCHING
Index of first occurence
Index of last occcurence
Count occurences of an element (lasto-firsto+1)
Count 1's in a sorted binary tree
Square root
Search in a sorted rotated array
Find a peak element(Both adjacent elements are smaller)
Triplet sum (sorted array)
Median of two sorted arrays
Repeating element (slow,fast approach)
Allocate min no pages (ans in [Maxelement,Sum], binary search)


d) SORTING
Sorting non primitive types (cmp fucntion implements Comparator<Point>, Point)
Bubble sort
Insertion sort
Selection sort
Merge sort
Intersection of two sorted arrays
Union of two sorted arrays
lomuto partition
hoarse partition
kthsmallest element(using lomuto partition)
dutch national flag problem (seggregate 0's 1's and 2's)
Merge overlapping intervals
Cycle sort
Heap sort
Count sort
Radix sort
**Bucket sort


e) Matrix
Transpose of a matrix
Rotate an array by 90 (transpose+condition)
Spiral traversal of a matrix
Search in a row wise and col wise sorted (start from top right)
Median of a row wise sorted matrix (odd sized matrix, distinct ele)


f) Hashing
Intersection and union of two unsorted arrays using hashset
Find a pair in an unsorted array for given sum using hashset
Finding whether subarray with given sum is present?
Longest subarray size with given sum
Longest subarray size with equal no of 0's and 1's (replace 0's with -1's and call above function)
Longest common span with same sum for binary array
Longest consecutive subsequence array
Count distinct elements in every window of an array

g) Strings
Leftmost repeating character
Leftmost non-repeating character
Reverse words in a string
Naive algorithm and KMP for pattern searching
Anagram Search
Lexicographic rank of a string


h) LinkedLists
Insert,Delete and Search  singly linked list
Insert,Delete and Seach doubly linked list
insert, delete circular linked list
Recursive reverse a single linked list
Reverse a single linked list
Reversing a doubly linked list
Recursive search for element in single linkedlist
Insert at begin circular doubly linkedlist
Sorted insert in a linked list
Middle of a linked list (slow fast approach)
Nth node from end of a linkedlist (move one pointer upto node n and start another pointer from start, this pointer simultaneously)
Remove duplicates from sorted linked lists
Reverse a linked list in groups of k
Detect loop/
Detect loop and remove loop 
Seggregate even and odd nodes
Intersection point of two linked lists
Pair wise swap of linked lists
LRU cache design
Merge two sorted linked lists
Palindrome linked list (slow and fast approach to find mid ele, reverse mid to last index and check first half ll and reversed ll)


I) Stacks
Stacks using arrays
Stacks using dynamic arrays (ArrayList)
Stacks using Linkedlists 
Stack using ArrayDeque
Balanced Parenthesis
Implement two stacks in an array
Stock span problem
Previous greater element
Next greater element
Find min in O(1) time
infix to postfix
Evaluate postfix to a number


J) Queues
Array implementation
Linkedlist implementation
ArrayDeque
Implement stack using queues
Recursive
ArrayDeque
Maximums of all subarrays of size k

K) Trees
Inorder,Preorder,Postorder
Height of a binary tree 
Print nodes at distance k
Level order traversal
Level order traversal line by line
Size of a binary tree
Maximum in binary trees
Print left view of binary tree
Children sum property
Check for balanced binary tree
Find width of a binary tree
Construct binary tree with inorder and preorder
Tree traversal in spiral form
Diameter of a binary tree (Longest distance between leaf nodes)
Lowest Common Ancestor
Maximum distance from given leaf to any of the nodes










